4th :
Practical Requirement:
* A working installation of GIT on your system
* Command Line Interface (CLI) access
* Basic files and directories for version control
* Internet access
Conclusion: GIT is a powerful version control system that allows for tracking changes, reverting to previous versions, and maintaining a complete history of changes made to files and directories. For successful implementation, you need a GIT installation, a basic understanding of GIT commands, and access to the CLI for executing commands. This practical demonstrates how version control can help manage files efficiently by allowing collaboration, rollback options, and a clear log of all changes made over time.




5th :
Practical Requirements:
1. Git Installation: Ensure Git is installed on your local machine.
2. GitHub Account: You need a GitHub account to create a repository.
3. GitHub Repository: Create a repository on GitHub that you can sync with your local Git repository.
4. Internet Access: To push and pull changes between your local repository and GitHub, an active internet connection is required.
Conclusion: Version control using GitHub enhances collaboration and ensures that changes made to code are synchronized across different environments. By following this practical, you learned how to:
* Create a GitHub repository and link it with a local Git repository.
* Commit files and maintain a history of changes.
* Push changes to a remote repository for backup and collaboration.
* Pull changes from the remote repository to ensure the local codebase is up to date.
This workflow ensures smooth collaboration, enabling developers to manage project versions efficiently, keep local and remote repositories synchronized, and prevent conflicts during development. Implementing version control with GitHub is an essential skill for collaborative software development.






6th:
Requirements
1. A computer with internet access.
2. A GitHub account.
3. Jenkins installed (if possible, set up on your computer).
Conclusion:
In this practical session, we successfully created a GitHub repository, uploaded an HTML website, and published it to GitHub Pages. We integrated Jenkins to automate the testing process, ensuring that our website is functioning correctly. By using the cURL command, we verified that the website loads without any issues, receiving a status code of 200. This practical demonstration illustrates the core principles of DevOps: collaboration through version control with GitHub and automation with Jenkins, which enhance the efficiency and reliability of software development processes.


7th: 
Requirements
1. Jenkins server installed and running.
2. Java source code.
3. Git repository for the source code.
4. Internet connection for installing Jenkins plugins.
Conclusion:
In this practical session, we successfully learned how to deploy and test Java applications using Jenkins. We created a GitHub repository and uploaded a simple Java program. By setting up a Jenkins job linked to our repository, we configured the build steps to compile and run our Java application automatically. This process demonstrates the efficiency of using Jenkins for continuous integration and delivery, allowing for streamlined development workflows and automated testing. With Jenkins, we can easily manage code changes, run builds, and verify the application’s functionality, which is essential for modern software development practices.






8th: 
Requirements
1. Jenkins server installed and running.
2. Web application source code.
3. Git repository for the source code.
4. Internet connection for installing Jenkins plugins.


Conclusion:
In this practical session, we successfully learned how to deploy and test web applications using Jenkins. We created a GitHub repository and uploaded our HTML website files. By setting up a Jenkins job linked to our repository, we configured build steps to create a local folder and copy the website files from the repository to that folder. This process demonstrates the effectiveness of using Jenkins for continuous integration and delivery, allowing us to automate the deployment of web applications efficiently. With Jenkins, we can ensure that our web applications are consistently updated and easily accessible, even when server deployment is not an option.